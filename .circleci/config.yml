version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:24.0  # Docker가 포함된 환경
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: apk add --no-cache openjdk17 gradle
      - run:
          name: Build the application
          command: ./gradlew clean build -x test
      - run:
          name: Run tests
          command: ./gradlew test
      - run:
          name: Build bootJar
          command: ./gradlew bootJar

  docker_build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker login
          command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin  # 환경 변수로 로그인
#      - run:
#        name: Docker login
#        command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin  # 환경 변수로 로그인
      - run:
          name: Build Docker image
          command: |
            docker build -t springboot-app:latest .
            docker tag springboot-app:latest aktmzm20/springboot-app:latest  # 태그 추가
            docker images  # 빌드된 이미지 확인
      - run:
          name: Push Docker image to Docker Hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin  # Docker Hub 로그인
            docker push aktmzm20/springboot-app:latest  # Docker Hub로 푸시

  docker_run:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Pull Docker image
          command: |
            docker pull aktmzm20/springboot-app:latest || echo "Image not found, proceeding..."
      - run:
          name: Run Docker container
          command: |
            docker run -d -p 8080:8080 aktmzm20/springboot-app:latest || (echo "Image not found" && exit 1)
            sleep 10
            nc -zv localhost 8080 || exit 1  # 포트 8080이 열려 있는지 확인

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - docker_build:
          requires:
            - build
      - docker_run:
          requires:
            - docker_build