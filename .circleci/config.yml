version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:24.0  # Docker 환경
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: apk add --no-cache openjdk17 gradle
      - run:
          name: Build the application
          command: ./gradlew clean build -x test
      - run:
          name: Run tests
          command: ./gradlew test
      - run:
          name: Build bootJar
          command: ./gradlew bootJar

  docker_build:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Docker login
          command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin  # Docker Hub 로그인
      - run:
          name: Build Docker image
          command: |
            docker build -t springboot-app:latest .
            docker tag springboot-app:latest aktmzm20/springboot-app:latest
            docker images
      - run:
          name: Push Docker image to Docker Hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push aktmzm20/springboot-app:latest

  deploy:
    executor: docker-executor
    docker:
      - image: circleci/python:3.8  # kubectl을 사용할 수 있는 이미지
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Set up Kubernetes config
          command: |
            echo "$KUBE_CONFIG" > ~/.kube/config  # KUBE_CONFIG 환경 변수를 사용하여 Kubernetes config 설정
      - run:
          name: Apply Kubernetes Manifests
          command: |
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - docker_build:
          requires:
            - build
      - deploy:
          requires:
            - docker_build