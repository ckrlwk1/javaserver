version: 2.1

executors:
  docker-executor:
    docker:
      - image: openjdk:17-jdk  # OpenJDK 17 이미지 사용
    working_directory: ~/repo

  alpine-executor:
    docker:
      - image: alpine:latest  # Alpine Linux 기반 이미지
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout  # GitHub에서 소스 코드 가져오기
      - run:
          name: Install unzip and SDKMAN, then Gradle
          command: |
            apk update  # apk 패키지 업데이트
            apk add --no-cache unzip curl bash  # unzip, curl, bash 설치
            curl -s "https://get.sdkman.io" | bash  # SDKMAN 설치
            source "$HOME/.sdkman/bin/sdkman-init.sh"  # SDKMAN 초기화
            sdk install gradle  # SDKMAN으로 Gradle 설치
      - run:
          name: Build Spring Boot Application with Gradle
          command: ./gradlew clean build -x test  # Gradle로 빌드

  docker_build:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: ./gradlew buildDocker  # Gradle을 통해 Docker 이미지 빌드
      - run:
          name: Push Docker Image to DockerHub
          command: |
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
            docker push aktmzm20/springboot-app:${CIRCLE_SHA1}

  deploy:
    executor: alpine-executor  # Alpine 이미지 사용
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Apply Kubernetes Manifests
          command: |
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - docker_build:
          requires:
            - build
      - deploy:
          requires:
            - docker_build